# indices is a cube in stack.
# axis and sign is the face.
# return neighbor in direction
(string id) new_id(object state):
    id = to_json(state.counter)
    state.counter += 1

(string name, string ext) filename_type(string filename):
    texts = split(filename, ".")
    if length(texts) == 2:
        name = texts[0]
        ext = texts[1]
    else:
        name = filename
        ext = null

(object placement) new_placement(object orient, array position):
    placement = {
        "orient": orient,
        "position": position
    }

# square in 3D coordinates.
(object square) new_square(array position, number size, number axis):
    square = {
        "position": position,
        "size": size,
        "axis": axis
    }

# rectangle in 3D coordinates.
(object rectangle) rectangle_new(array position, array size, number axis):
    rectangle = {
        "position": position,
        "size": size,
        "axis": axis
    }

# 2D rectangle
(object rectangle) rectangle_2d_new(array position, array size):
    rectangle = {
        "position": position,
        "size": size
    }

# sign is 0 or 1. axis is 0, 1, or 2.
(object face) axis_sign_new(number axis, number sign):
    face = {
        "axis": axis,
        "sign": sign
    }

(number num) index_axis_sign(number axis, number sign):
    if axis == 0:
        if sign == 0:
            num = 0
        else:
            num = 1
    elif axis == 1:
        if sign == 0:
            num = 2
        else:
            num = 3
    else:
        if sign == 0:
            num = 4
        else:
            num = 5

(object axis_sign) axis_sign_index(number index):
    axis = 0
    sign = 0
    if index == 1:
        sign = 1
    elif index == 2:
        axis = 1
    elif index == 3:
        axis = 1
        sign = 1
    elif index == 4:
        axis = 2
    elif index == 5:
        axis = 2
        sign = 1
    axis_sign = axis_sign_new(axis, sign)


(object cuboid) cuboid_color_new(array position, array size, array color):
    cuboid = {
        "position": position,
        "size": size,
        "color": color
    }

(object cuboid) cuboid_new(array position, array size):
    cuboid = {
        "position": position,
        "size": size
    }

(object cuboid) cuboid_cached_new(array position, array size):
    #points = points_cuboid(position, size)
    max = sum_arrays_3(position, size)
    cuboid = {
        "position": position,
        "size": size,
        "max": max
    }

(object to_save) min_cube_unused(object cube):
    to_save = {
        "position": cube.position,
        "color": cube.color,
        "size": cube.size,
        "id": cube.id,
        "vertices": null
    }

(bool equal) face_equal(object one, object two):
    equal = (one.axis == two.axis) && (one.sign == two.sign)

(bool yes) array_equal(array a, array b):
    if length(a) != length(b):
        yes = false
        return
    for i in range(length(a)):
        if a[i] != b[i]:
            yes = false
            return
    yes = true

(bool yes) color_equal(array a, array b):
    yes = (a[0] == b[0] && a[1] == b[1] && a[2] == b[2] && a[3] == b[3])

(bool yes) position_equal(array a, array b):
    yes = (a[0] == b[0] && a[1] == b[1] && a[2] == b[2] && a[3] == b[3])

# 2 rotations. angle in degrees, axis is 0,1,2
(array rotates) rotates_ortho_new(number ang_one, number axis_one, number ang_two, number axis_two):
    rotates = [
        {
            "angle": ang_one,
            "axis": axis_one
        },
        {
            "angle": ang_two,
            "axis": axis_two
        }
    ]

(object orient) orient_new(array right, array front):
    orient = {
        "right": right,
        "front": front
    }

(object cube) cubes_get(array cubes, array position):
    cube = null
    for element in cubes:
        if array_equal(element.position, position):
            cube = element
            return

# list of numbers, converted to integer
(string text) integer_array_string(array integer_array):
    texts = []
    for integer in integer_array:
        append(texts, integer_string(integer))
    text = from_json(texts)

(number same_axis) equal_axis(object one, object two, number axis):
    same_axis = null
    for i in range(3):
        if i == axis:
            continue
        if one.position[i] == two.position[i]:
            same_axis = i


(array sum_indices) neighbor_indices(array indices, number axis, number sign):
    sum_indices = [indices[0], indices[1], indices[2]]
    value = sign
    if sign == 0:
        value = -1
    sum_indices[axis] += value

(number axis, number sign) outer_direction(array voxels, array indices):
    if indices[0] < 0 || indices[1] < 0 || indices[2] < 0:
        outside = true
        return

    if indices[2] >= length(voxels) || indices[1] >= length(voxels[0]) || indices[0] >= length(voxels[0][0]):
        outside = true
        return

(array up) orientation_up(object orientation):
    up = cross_product(orientation.right, orientation.front)

(array direction) orientation_direction(object orientation, number axis, number sign):
    right = orientation.right
    front = orientation.front
    up = orientation_up(orientation)
    if axis == 0:
        if sign == 1:
            direction = right
        else:
            direction = array_scaled(right, -1)
    elif axis == 1:
        if sign == 1:
            direction = front
        else:
            direction = array_scaled(front, -1)
    elif axis == 2:
        if sign == 1:
            direction = up
        else:
            direction = array_scaled(up, -1)

(number new_axis, number new_sign) adjacent_face(number face_axis, number axis, number sign):
    new_sign = sign
    new_axes = []
    for i in range(3):
        if i == face_axis:
            continue
        append(new_axes, i)
    new_axis = new_axes[axis]

# face axis is the plane. axis and sign point around the plane in 4 directions (NSEW)
(array adjacent) adjacent_indices(array indices, number face_axis, number axis, number sign):
    new_axis = []
    for i in range(3):
        if i == face_axis:
            continue
        append(new_axis, i)

    adjacent = neighbor_indices(indices, new_axis[axis], sign)

# position and unit_size define the stack.
# point is some point of intersection
# indices is a cube in stack where point intersects
(array indices) stack_indices(array voxels, array position, number unit_size, array point):
    lengths = [length(voxels[0][0]), length(voxels[0]), length(voxels)]
    for i in range(3):
        index = (point[i] - position[i]) / unit_size
        if index >= lengths[i]:
            # hit top point/line/plane.
            index = lengths[i] - 1
        append(indices, index)

# return position at new index of stack
(array position) stack_position(object stack, array indices):
    position = sum_arrays(stack.position, array_scaled(indices, stack.unit_size))


(object bounds) cubes_bounds(array cubes):
    point = []
    size = []
    for i in range(3):
        min = cubes[0].position[i]
        max = min + cubes[0].size
        for j in range(1, length(cubes)):
            this_min = cubes[j].position[i]
            this_max = this_min + cubes[j].size
            if this_min < min:
                min = this_min
            if this_max > max:
                max = this_max
        append(point, min)
        append(size, max - point[i])
    bounds = cuboid_new(point, size)

# from array of cuboids, find a cuboid that covers all of them.
(array point, array size) bounds_cuboids(array cuboids):
    for i in range(3):
        min = cuboids[0].position[i]
        max = min + cuboids[0].size[i]
        for j in range(1, length(cuboids)):
            this_min = cuboids[j].position[i]
            this_max = this_min + cuboids[j].size[i]
            if this_min < min:
                min = this_min
            if this_max > max:
                max = this_max
        append(point, min)
        append(size, max - point[i])

# do the two 2d rectangles overlap?
(bool yes) is_overlap_rectangles(object one, object two):
    one_position = one.position
    one_size = one.size
    two_position = two.position
    two_size = two.size
    two_max  = [two_position[0] + two_size[0], two_position[1] + two_size[1]]
    min = [one_position[0], one_position[1]]
    max  = [one_position[0] + one_size[0], one_position[1] + one_size[1]]

    for i in range(2):
        if two_position[i] < min[i]:
            min[i] = two_position[i]
        if two_max[i] > max[i]:
            max[i] = two_max[i]

    ranges = [one_size[0] + two_size[0], one_size[1] + two_size[1]]
    for i in range(2):
        if max[i] - min[i] >= ranges[i]:
            yes = false
            return
    yes = true



(bool yes) is_overlap_cuboids(array one_p, array one_s, array one_max, array two_p, array two_s, array two_max):
    min0 = one_p[0]
    min1 = one_p[1]
    min2 = one_p[2]
    max0 = one_max[0]
    max1 = one_max[1]
    max2 = one_max[2]

    if two_p[0] < min0:
        min0 = two_p[0]
    if two_max[0] > max0:
        max0 = two_max[0]

    if two_p[1] < min1:
        min1 = two_p[1]
    if two_max[1] > max1:
        max1 = two_max[1]

    if two_p[2] < min2:
        min2 = two_p[2]
    if two_max[2] > max2:
        max2 = two_max[2]

    if (max0 - min0) >= (one_s[0] + two_s[0]):
        yes = false
        return
    if (max1 - min1) >= (one_s[1] + two_s[1]):
        yes = false
        return
    if (max2 - min2) >= (one_s[2] + two_s[2]):
        yes = false
        return

    yes = true

(number axis) axis_overlap_cuboids(array one, array one_size, array two, array two_size):
    # 1. same plane
    # 2. overlapping square
    for i in range(3):
        one_rect = face_cuboid(one, one_size, i, 0)
        two_rect = face_cuboid(two, two_size, i, 0)
        if is_overlap_rectangles(one_rect, two_rect):
            axis = i
            return

    axis = null
    return

(number axis, number sign) face_overlap_unit(array one, array two):
    for i in range(3):
        if one[i] == two[i] + 1:
            one_point = face_unit_cube(one, one_size, i, 0)
            two_point = face_unit_cube(two, two_size, i, 1)
            if position_equal(one_point, two_point):
                axis = i
                sign = 0
                return

    for i in range(3):
        if one[i] + 1 == two[i]:
            one_point = face_unit_cube(one, one_size, i, 0)
            two_point = face_unit_cube(two, two_size, i, 1)
            if position_equal(one_point, two_point):
                axis = i
                sign = 1
                return

    axis = null
    sign = null
    return


# do the cuboid faces overlap? in other words, do the cuboids touch
# somewhere? if so, return axis and sign from one's perspective.
(number axis, number sign) face_overlap(array one, array one_size, array one_max, array two, array two_size, array two_max):
    # do they overlap?
    # 1. same plane
    # 2. overlapping square
    # -x
    for i in range(3):
        if one[i] == two_max[i]:
            one_rect = face_cuboid(one, one_size, i, 0)
            two_rect = face_cuboid(two, two_size, i, 1)
            if is_overlap_rectangles(one_rect, two_rect):
                axis = i
                sign = 0
                return

    for i in range(3):
        if one_max[i] == two[i]:
            one_rect = face_cuboid(one, one_size, i, 1)
            two_rect = face_cuboid(two, two_size, i, 0)
            if is_overlap_rectangles(one_rect, two_rect):
                axis = i
                sign = 1
                return
    axis = null
    sign = null
    return

(array output) nullify_input(array normal, array input):
    n0 = normal[0]
    n1 = normal[1]
    n2 = normal[2]
    i0 = input[0]
    i1 = input[1]
    i2 = input[2]
    output = [input[0], input[1], input[2]]

    if (i0 > 0 && n0 > 0) || (i0 < 0 && n0 < 0):
        output[0] = 0
    elif (i1 > 0 && n1 > 0) || (i1 < 0 && n1 < 0):
        output[1] = 0
    elif (i2 > 0 && n2 > 0) || (i2 < 0 && n2 < 0):
        output[2] = 0

(object bounds) bounds_geometry(array geometry):
    vertex = geometry[0]
    min = [vertex[0], vertex[1], vertex[2]]
    max = [vertex[0], vertex[1], vertex[2]]
    for i in range(1, length(geometry)):
        vertex = geometry[i]
        for j in range(3):
            num = vertex[j]
            if num < min[j]:
                min[j] = num
            elif num > max[j]:
                max[j] = num
    size = subtract_arrays(max, min)
    bounds = cuboid_new(min, size)

# takes 3 elements in position array
(array new_matrix) matrix_translate(array position):
    new_matrix = array_float([
        [1.0, 0.0, 0.0, position[0]],
        [0.0, 1.0, 0.0, position[1]],
        [0.0, 0.0, 1.0, position[2]],
        [0.0, 0.0, 0.0, 1.0         ]
    ])



# translate a position by direction*scale
(array new_position) translate(array position, array direction, number scale):
    new_position = sum_arrays(position, array_scaled(direction, scale))

# rotate a vector by angle in radians and axis
# vector must be 3 elements
(array new_vector) rotate(array vector, number angle, array axis):
    matrix = rotation_matrix(angle, axis[0], axis[1], axis[2])
    new_vector = product_matrix_array(matrix, vector)

# unit vector in direction of face.
(array vector) vector_axis_sign_scaled(number axis, number sign, number scale):
    vector = array_float([0.0,0.0,0.0])
    if sign == 0:
        scale *= -1.0
    vector[axis] = scale

(array normal) vector_axis_sign(number axis, number sign):
    value = -1
    if sign == 1:
        value = 1
    normal = array_float([0,0,0])
    normal[axis] = value

(number idx) index_vector(array vec):
    if vec[0] < 0:
        idx = 0
    elif vec[0] > 0:
        idx = 1
    elif vec[1] < 0:
        idx = 2
    elif vec[1] > 0:
        idx = 3
    elif vec[2] < 0:
        idx = 4
    else:
        idx = 5

(array vec) vector_index(number idx):
    vec = array_float([0,0,0])
    if idx == 0:
        vec[0] = -1
    elif idx == 1:
        vec[0] = 1
    elif idx == 2:
        vec[1] = -1
    elif idx == 3:
        vec[1] = 1
    elif idx == 4:
        vec[2] = -1
    else:
        vec[2] = 1

# only returns components that are non-zero. 3 component
(array vectors) vectors_component(array vector):
    if vector[0] != 0.0:
        append(vectors, [vector[0], 0.0, 0.0])
    if vector[1] != 0.0:
        append(vectors, [0.0, vector[1], 0.0])
    if vector[2] != 0.0:
        append(vectors, [0.0, 0.0, vector[2]])


(array vectors) vectors_component_unit(array vector):
    if vector[0] > 0.0:
        append(vectors, [1.0, 0.0, 0.0])
    elif vector[0] < 0.0:
        append(vectors, [-1.0, 0.0, 0.0])
    if vector[1] > 0.0:
        append(vectors, [0.0, 1.0, 0.0])
    elif vector[1] < 0.0:
        append(vectors, [0.0, -1.0, 0.0])
    if vector[2] > 0.0:
        append(vectors, [0.0, 0.0, 1.0])
    elif vector[2] < 0.0:
        append(vectors, [0.0, 0.0, -1.0])

(number axis, number sign) axis_sign_vector(array vector):
    for i in range(3):
        axis = i
        if vector[i] < 0:
            sign = 0
            return
        elif vector[i] > 0:
            sign = 1
            return

# get the time to travel from point to the plane in the normal direction.
(number time) time_point_plane(array point, array plane_point, array normal):
    i = subtract_arrays(plane_point, point)
    ldotn = (normal[0]*normal[0] + normal[1]*normal[1] + normal[2]*normal[2])
    time = (i[0]*normal[0] + i[1]*normal[1] + i[2]*normal[2]) / ldotn

(number time) time_denorm_point_plane(array point, array plane_point, array normal):
    i0 = plane_point[0] - point[0]
    i1 = plane_point[1] - point[1]
    i2 = plane_point[2] - point[2]
    #i = subtract_arrays_3(plane_point, point)
    #ldotn = (normal[0]*normal[0] + normal[1]*normal[1] + normal[2]*normal[2])
    time = i0*normal[0] + i1*normal[1] + i2*normal[2]

# find out distance from one to two
# in direction vector.
(number time) distance_directional(array vector, array one_p, array one_s, array two_p, array two_s):
    begin = point_farthest(one_p, one_s, vector)
    end = point_farthest(two_p, two_s, array_scaled(vector, -1))

    #print(["distance_dir", begin, end])
    i = subtract_arrays(end, begin)
    ldotn = (vector[0]*vector[0] + vector[1]*vector[1] + vector[2]*vector[2])
    time = (i[0]*vector[0] + i[1]*vector[1] + i[2]*vector[2]) / ldotn
    #print(["distance_dir", time])

(number value) farthest_axis_sign(array min, array max, number axis, number sign):
    if sign == 0:
        if axis == 0:
            value = min[0]
        elif axis == 1:
            value = min[1]
        else:
            value = min[2]
    else:
        if axis == 0:
            value = max[0]
        elif axis == 1:
            value = max[1]
        else:
            value = max[2]


(array max_point) point_farthest(array min, array max, array vector):
    max_point = [min[0], min[1], min[2]]
    if vector[0] > 0:
        max_point[0] = max[0]
    if vector[1] > 0:
        max_point[1] = max[1]
    if vector[2] > 0:
        max_point[2] = max[2]


# find the farthest point in the cuboid in some direction.
(array max_point) point_farthest_points(array points, array vector):
    #points = points_cuboid(position, size)
    line_point = points[0]
    max_time = 0
    max_point = line_point

    lp0 = line_point[0]
    lp1 = line_point[1]
    lp2 = line_point[2]
    #ldotn = (vector[0]*vector[0] + vector[1]*vector[1] + vector[2]*vector[2])
    v0 = vector[0]
    v1 = vector[1]
    v2 = vector[2]
    for i in range(1, 8):
        plane_point = points[i]
        t0 = plane_point[0] - lp0
        t1 = plane_point[1] - lp1
        t2 = plane_point[2] - lp2
        #t = subtract_arrays(plane_point, line_point)
        #time = (t[0] *vector[0] + t[1]*vector[1] + t[2]*vector[2]) / ldotn
        #time = (t[0] *vector[0] + t[1]*vector[1] + t[2]*vector[2])
        time = (t0 *v0 + t1*v1 + t2*v2)
        if time > max_time:
            max_time = time
            max_point = plane_point


# From a cuboid's position and size, and corner get the point
# size is 3
(array point) corner_point(array position, array size, array corner):
    point = [position[0], position[1], position[2]]
    for i in range(3):
        point[i] += size[i]*corner[i]

(array points) points_cuboid(array p, array s):
    points = [
        [p[0],        p[1],        p[2]],
        [p[0] + s[0], p[1],        p[2]],
        [p[0] + s[0], p[1] + s[1], p[2]],
        [p[0]       , p[1] + s[1], p[2]],
        [p[0]       , p[1],        p[2] + s[2]],
        [p[0] + s[0], p[1],        p[2] + s[2]],
        [p[0] + s[0], p[1] + s[1], p[2] + s[2]],
        [p[0],        p[1] + s[1], p[2] + s[2]]
    ]

# get corners of the rectangle defined by a direction
# corner is a point in the unit cube.
(array corners) get_corners(number axis, number sign):
    if axis == 0:
        corners = [
            [sign, 0, 0],
            [sign, 1, 0],
            [sign, 1, 1],
            [sign, 0, 1]
        ]
    elif axis == 1:
        corners = [
            [0, sign, 0],
            [0, sign, 1],
            [1, sign, 1],
            [1, sign, 0]
        ]
    else:
        corners = [
            [0, 0, sign],
            [1, 0, sign],
            [1, 1, sign],
            [0, 1, sign]
        ]


# get the 2 triangles for a given square of a cuboid
# size is a 3 element array.
(array triangles) triangles_cuboid_face(array position, array size, number axis, number sign, array color):
    corners = get_corners(axis, sign)
    points = []
    normal = vector_axis_sign(axis, sign)
    for i in range(4):
        corner = corners[i]
        point = corner_point(position, size, corner)
        append(points, point)
    ins = [3,2,1,0]
    if sign == 1:
        ins = [0,1,2,3]

    indices_pair = [[0,1,2], [2,3,0]]

    triangles = []
    for indices in indices_pair:
        for i in indices:
            vertex = []
            extend(vertex, points[ins[i]])
            extend(vertex, normal)
            extend(vertex, color)
            append(triangles, vertex)

# product 4x4 matrix
(array new_matrix) matrix_placement(array position, array rotates):
    new_matrix = matrix_translate(position)
    for rotate in rotates:
        matrix = matrix_rotate_ortho(rotate.angle, rotate.axis)
        new_matrix = product_matrices(new_matrix, matrix)


# angle is 0, 90, 180, 270
# 0,1,2
(array matrix) matrix_rotate_ortho(number angle, number axis):
    cos_ang = 0
    sin_ang = 0
    if angle == 0:
        cos_ang = 1
        sin_ang = 0
    elif angle == 90:
        cos_ang = 0
        sin_ang = 1
    elif angle == 180:
        cos_ang = -1
        sin_ang = 0
    elif angle == 270:
        cos_ang = 0
        sin_ang = -1

    x = 1
    y = 0
    z = 0
    if axis == 1:
        x = 0
        y = 1
        z = 0
    elif axis == 2:
        x = 0
        y = 0
        z = 1

    matrix = array_float([
        [cos_ang + x*x*(1 - cos_ang), x*y*(1-cos_ang) - z*sin_ang, x*z*(1-cos_ang) + y*sin_ang, 0.0],
        [y*x*(1 - cos_ang) + z * sin_ang, cos_ang + y*y*(1 -cos_ang), y*z*(1-cos_ang) - x*sin_ang, 0.0],
        [z*x*(1-cos_ang) - y*sin_ang, z*y*(1-cos_ang)+x*sin_ang, cos_ang + z*z*(1-cos_ang), 0.0],
        [0.0, 0.0, 0.0, 1.0]
    ])


# get rotation matrix. ang is angle in radians, in_vector is 3 numbers
(array matrix) rotation_matrix(number ang, number x, number y, number z):
    matrix = [[cos(ang) + x*x*(1 - cos(ang)), x*y*(1-cos(ang)) - z*sin(ang), x*z*(1-cos(ang)) + y*sin(ang)],
    [y*x*(1 - cos(ang)) + z * sin(ang), cos(ang) + y*y*(1 -cos(ang)), y*z*(1-cos(ang)) - x*sin(ang) ],
    [z*x*(1-cos(ang)) - y*sin(ang), z*y*(1-cos(ang))+x*sin(ang), cos(ang) + z*z*(1-cos(ang)) ]]

(array transformed) point_transformed(array matrix, array p):
    transformed = product_matrix_array(matrix, [p[0], p[1], p[2], 1])
    pop(transformed)
# out_vector = matrix * vector
# don't call directly for transformations.
(array out_vector) product_matrix_array(array matrix, array vector):
    for row in matrix:
        sum = 0
        for i in range(length(vector)):
            sum += row[i]*vector[i]
        append(out_vector, sum)

# 4x4 matrix
(array product) product_matrices(array one, array two):
    for one_row in one:
        row = []
        for j in range(4):
            sum = 0
            for k in range(4):
                sum += (one_row[k] * two[k][j])
            append(row, sum)
        append(product, row)

# sum two arrays
(array sum) sum_arrays(array a, array b):
    for i in range(length(a)):
        append(sum, a[i]+b[i])
(array sum) sum_arrays_3(array a, array b):
    sum = [a[0] + b[0], a[1] + b[1], a[2] + b[2]]

(array sum) subtract_arrays(array a, array b):
    for i in range(length(a)):
        append(sum, a[i]-b[i])

(array final) subtract_arrays_3(array a, array b):
    final = [a[0] - b[0], a[1] - b[1], a[2] - b[2]]

# product = a * b
(array product) array_scaled(array a, number b):
    for i in range(length(a)):
        append(product, a[i]*b)

# return identity matrix
(array identity) matrix_identity():
    identity = array_float([
        [1,0,0,0],
        [0,1,0,0],
        [0,0,1,0],
        [0,0,0,1]
    ])

# glOrtho matrix
(array matrix) ortho_make(number left, number right, number bottom, number top, number zNear, number zFar):
    tx = -1.0 * (right + left) / (right - left)
    ty = -1.0 * (top + bottom) / (top - bottom)
    tz = -1.0 * (zFar + zNear) / (zFar - zNear)
    matrix = [
        [2.0/(right - left), 0,                  0,                 tx],
        [0,                  2.0/(top - bottom), 0,                 ty],
        [0,                  0,                  -2.0/(zFar - zNear), tz],
        [0,                  0,                  0,                 1 ]
    ]

# get perspective matrix.
(array perspective) perspective_make(number fovy, number aspect, number z_near, number z_far):
    #fovy_radians = radians(fovy/2)
    f = 1.0/tan(fovy/2)
    perspective = [[f/aspect, 0, 0,  0],
                   [0,        f, 0,  0],
                   [0,        0, (z_far+z_near)/(z_near-z_far), (2*z_far*z_near)/(z_near-z_far)],
                   [0,        0, -1, 0]]

# find cross product x X y
(array cross) cross_product(array x, array y):
    cross = [x[1]*y[2] - x[2]*y[1],
             x[2]*y[0] - x[0]*y[2],
             x[0]*y[1] - x[1]*y[0]]

(array unit_vector) vector_unit(array vector):
    magnitude = magnitude_vector(vector)
    for item in vector:
        append(unit_vector, item/magnitude)

(array final) vector_magnitude(array vector, number magnitude):
    zero = true
    for i in vector:
        if i != 0:
            zero = false
    if zero:
        final = vector
    else:
        unit = vector_unit(vector)
        final = array_scaled(unit, magnitude)

# get magnitude of a vector
(number magnitude) magnitude_vector(array vector):
    sum_square = 0
    for i in range(length(vector)):
        sum_square += (vector[i] * vector[i])
    magnitude = square_root(sum_square)

# make lookAt matrix.
(array look_at) look_at_make(array eye, array center, array up):
    F = [center[0] - eye[0], center[1] - eye[1], center[2] - eye[2]]
    f_mag = magnitude_vector(F)
    f = [F[0]/f_mag, F[1]/f_mag, F[2]/f_mag]
    up_mag = magnitude_vector(up)
    up_unit = [up[0]/up_mag, up[1]/up_mag, up[2]/up_mag]
    s = cross_product(f,up_unit)
    u = cross_product(s,f)
    t0 = -1*eye[0]*s[0] +  -1*eye[1]*s[1] + -1*eye[2]*s[2]
    t1 = -1*eye[0]*u[0] +  -1*eye[1]*u[1] + -1*eye[2]*u[2]
    t2 = eye[0]*f[0] +  eye[1]*f[1] + eye[2]*f[2]
    look_at = [[s[0],    s[1],    s[2],    t0],
               [u[0],    u[1],    u[2],    t1],
               [-1*f[0], -1*f[1], -1*f[2], t2],
               [0,       0,       0,       1]
           ]

# based on camera's current state, and position in camera's screen, get direction being pointed at.
# window (0,0) is bottom-left.
(array direction) direction_from_camera(object orient, number FOVY, array resolution, array position):

    #assume lookAt is going to -Z direction, (0,0). length is 1.
    #height of half triangle is tan(FOVY/2).
    #width of half triangle is tan(FOVY/2*aspect)
    #height of point is (pixels/height_pixels)height of half triangle
    #weidth of point is (pixels/width_pixels)width of half triangle

    width = tan(FOVY/2)*resolution[0]/resolution[1]
    #height of triangle assuming forward length is 1.
    height = tan(FOVY/2)

    #actually just below midpoint.
    middleX = resolution[0]/2
    middleY = resolution[1]/2

    width_point = ((position[0] - middleX)/middleX)*width
    height_point = ((position[1] - middleY)/middleY)*height
    #now move 1 from position look at direction.
    #then move width to -1*left
    #then move height to up.
    direction = orient.front

    direction = sum_arrays(direction, array_scaled(orientation_up(orient),(height_point)))
    direction = sum_arrays(direction, array_scaled(orient.right,width_point))

    # unit vectorize
    direction = vector_unit(direction)


# rectangle defined by 2D origin and size
(bool yes) is_point_in_rectangle(array point, array position, array size):
    for i in range(2):
        if point[i] < position[i] || point[i] > position[i] + size[i]:
            yes = false
            return
    yes = true


(array new_position, array new_size) cuboid_transformed(array matrix, array position, array size):
    two = sum_arrays(position, size)
    new_one = point_transformed(matrix, position)
    new_two = point_transformed(matrix, two)
    new_position = []
    new_far = []
    for i in range(3):
        if new_one[i] < new_two[i]:
            append(new_position, new_one[i])
            append(new_far, new_two[i])
        else:
            append(new_position, new_two[i])
            append(new_far, new_one[i])

    new_size = subtract_arrays(new_far, new_position)

# return cubes in a 2 by 2 array. The order is in alphabetical axis order.
# position, size, and face are for the cuboid.
# so x,y  or y,z or x,z.
(array faces) adjacent_cubes(array position, number side, number axis):
    x = position[0]
    y = position[1]
    z = position[2]

    values = [-1*side, side]
    for i in range(3):
        if i == axis:
            continue

        sign_faces = []
        for value in values:
            position = [x,y,z]
            position[i] += value
            append(sign_faces, {"position":position, "size":side})
        append(faces, sign_faces)

# return 3D rectangles in a 2 by 2 array. The order is in alphabetical axis order.
# position, size, and face are for the cuboid.
# so x,y  or y,z or x,z.
(array faces) adjacent_squares(array position, number side, object face):
    x = position[0]
    y = position[1]
    z = position[2]
    axis = face.axis

    values = [-1*side, side]
    for i in range(3):
        if i == axis:
            continue

        sign_faces = []
        for value in values:
            position = [x,y,z]
            position[i] += value
            if face.sign == 1.0:
                position[axis] += side
            append(sign_faces, {"position":position, "size":side, "axis":axis})
        append(faces, sign_faces)


(bool yes) is_close_to_zero(number value):
    if value > -0.00001 && value < 0.00001:
        yes = true
    else:
        yes = false

(bool yes) is_close(number a, number b, number buffer):
    c = abs(a - b)
    if c < buffer:
        yes = true

(bool yes) is_close_vector_3(array a, array b, number buffer):
    yes = true
    for i in range(3):
        if is_close(a[i], b[i], buffer) == false:
            yes = false

# o is ray origin. d is ray direction.
# p is a point on rectangle. n is normal vector.
(number t) ray_to_rectangle_time(array o, array d, array p, array n):
    dot_product = d[0]*n[0] + d[1]*n[1] + d[2]*n[2]
    if is_close_to_zero(dot_product):
        # parallel
        t = null
        return
    D = -1*(n[0]*p[0] + n[1]*p[1] + n[2]*p[2])
    numerator = -1.0*(n[0]*o[0] + n[1]*o[1] + n[2]*o[2] + D)
    t = numerator/dot_product

# ray is defined by origin and direction
# a 3D rectangle is defined by point, size, and axis
# size is (x,y), (y,z) or (x,z)
# first intersect with plane.
# then see if it is inside square
# return null if doesn't intersect
(array intersect_point) intersect_ray_rectangle(array origin, array direction, array position, array size, number axis):
    # first dot product of ray and normal to rectangle
    normal = vector_axis_sign(axis, 1)
    t = ray_to_rectangle_time(origin, direction, position, normal)
    if t == null:
        intersect_point = null
        return
    on_plane = []
    plane_position = []
    intersect_point = sum_arrays(origin, array_scaled(direction, t))
    for i in range(3):
        if i != axis:
            append(on_plane, intersect_point[i])
            append(plane_position, position[i])
    if is_point_in_rectangle(on_plane, plane_position, size) == false:
        intersect_point = null

# Return faces visible from the outside.
(array faces) axis_signs_visible(array direction):
    x = direction[0]
    y = direction[1]
    z = direction[2]
    faces = []
    if x > 0.0:
        append(faces, axis_sign_new(0,0))
    elif x < 0.0:
        append(faces, axis_sign_new(0,1))
    if y > 0.0:
        append(faces, axis_sign_new(1,0))
    elif y < 0.0:
        append(faces, axis_sign_new(1,1))
    if z > 0.0:
        append(faces, axis_sign_new(2,0))
    elif z < 0.0:
        append(faces, axis_sign_new(2,1))



(object square) cube_square(array position, number size, number axis, number sign):
    square_position = [position[0], position[1], position[2]]
    if sign != 0:
        vector = vector_axis_sign_scaled(axis, sign, size)
        square_position = sum_arrays(position, vector)
    square = new_square(square_position, size, axis)

# return a 2D point
(array point) face_unit_cube(array position, number axis, number sign):
    face_position = [position[0], position[1], position[2]]
    if sign != 0:
        vector = vector_axis_sign(axis, sign)
        face_position = sum_arrays(position, vector)
    for i in range(3):
        if i != axis:
            append(point, face_position[i])

# this returns a 2D rectangle.
(object face) face_cuboid(array position, array size, number axis, number sign):
    face_position = [position[0], position[1], position[2]]
    if sign != 0:
        vector = vector_axis_sign_scaled(axis, sign, size[axis])
        face_position = sum_arrays(position, vector)

    new_position = []
    new_size = []
    for i in range(3):
        if i != axis:
            append(new_position, face_position[i])
            append(new_size, size[i])
    face = rectangle_2d_new(new_position, new_size)

# Intersect a ray and a face of a cuboid.
# point and direction define the array, and position and size define the cube.
# return point of intersection. return null if no intersection.
# the dimension that is parllel to face must be integer
(array intersect_point) intersect_ray_cuboid_face(array origin, array direction, array position, array size, number axis, number sign):
    # get the square, and try intersecting
    square_position = [position[0], position[1], position[2]]
    if sign != 0:
        vector = vector_axis_sign_scaled(axis, sign, size[axis])
        square_position = sum_arrays(position, vector)

    rectangle_size= []
    for i in range(3):
        if i == axis:
            continue
        append(rectangle_size, size[i])

    intersect_point = intersect_ray_rectangle(origin, direction, square_position, rectangle_size, axis)

# which direction should the next face be? trying to get closer to point.
(array face) next_face(array position, number size, array point):
    min_x = position[0]
    max_x = position[0] + size
    min_y = position[1]
    max_y = position[1] + size
    min_z = position[2]
    max_z = position[2] + size

    if point[1] > max_y:
        face = [1,1]
    elif point[1] < min_y:
        face = [1,0]
    elif point[0] > max_x:
        face = [0,1]
    elif point[0] < min_x:
        face = [0,0]
    elif point[2] > max_z:
        face = [2,1]
    elif point[2] < min_z:
        face = [2,0]


(array triangles) vertices_cube(array position, number size, array byte_color, number tick):
    triangles = vertices_cuboid(position, [size, size, size], byte_color, tick)

(array triangles) vertices_cuboid(array position, array size, array byte_color, number tick):
    offset = [position[0] + tick, position[1] + tick, position[2] + tick]
    new_size = [size[0] - 2.0*tick, size[1] - 2.0*tick, size[2] - 2.0*tick]
    color = []
    for digit in byte_color:
        append(color, digit/255.0)
    for axis in range(3):
        for sign in range(2):
            extend(triangles, triangles_cuboid_face(offset, new_size, axis, sign, color))
    triangles = array_float(triangles)

# color is the last 4 digits of vertex
(array new_geometry) copy_vertices_color(array vertices, array byte_color):
    new_geometry = []
    color = []
    for digit in byte_color:
        append(color, digit/255.0)
    for vertex in vertices:
        new_vertex = [vertex[0], vertex[1], vertex[2], vertex[3], vertex[4], vertex[5], color[0], color[1], color[2], color[3]]
        append(new_geometry, new_vertex)

(array new_geometry) vertices_scaled(array vertices, number scale):
    for vertex in vertices:
        new_vertex = [vertex[0] * scale, vertex[1] * scale, vertex[2] * scale, vertex[3], vertex[4], vertex[5], vertex[6], vertex[7], vertex[8], vertex[9]]
        append(new_geometry, new_vertex)

(array new_geometry) copy_vertices_offset(array vertices, array offset):
    for vertex in vertices:
        new_vertex = [vertex[0] + offset[0], vertex[1] + offset[1], vertex[2] + offset[2], vertex[3], vertex[4], vertex[5], vertex[6], vertex[7], vertex[8], vertex[9]]
        append(new_geometry, new_vertex)
